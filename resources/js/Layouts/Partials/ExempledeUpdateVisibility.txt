<template>
    <FormModal v-model:open="isModalVisible" titre="Gérer les détails du voyage"
        size="full_screen"
        :show_champ_obligatoir="false"
        :show-footer="false"
    >
        <div v-if="currentReservation">
            <div class="relative mb-4 bg-gray-50 shadow-inner">
                <div class="flex flex-wrap justify-start items-center">
                    <a-button-group>
                        <a-button v-for="voyage in displayedVoyages"
                            :key="voyage.id || voyage.numero_voyage"
                            size="large"
                            :type="selectedVoyage?.id === voyage.id && selectedVoyage?.numero_voyage === voyage.numero_voyage
                                    ? 'primary'
                                    : 'default'
                            "
                            :class="{'voyage-fictif': voyage.is_fictif,'voyage-reel': !voyage.is_fictif,}"
                            @click="handleVoyageChange(voyage)"
                        >
                            <font-awesome-icon :icon="voyage.is_fictif ? 'fa-solid fa-hourglass-half' : 'fa-solid fa-truck'" class="mr-2"/>
                            {{ voyage.numero_voyage }}
                        </a-button>
                        <a-dropdown v-if="dropdownVoyages.length > 0" :trigger="['click']">
                            <a-button size="large" :type="isDropdownActive ? 'primary' : 'default'">
                                <font-awesome-icon icon="fa-solid fa-ellipsis"/>
                            </a-button>
                            <template #overlay>
                                <div class="dropdown-menu-container">
                                    <a-button v-for="voyage in dropdownVoyages"
                                        :key="voyage.id || voyage.numero_voyage"
                                        size="large"
                                        :type=" selectedVoyage?.id === voyage.id && selectedVoyage?.numero_voyage === voyage.numero_voyage
                                                ? 'primary'
                                                : 'default'
                                        "
                                        :class="{'voyage-fictif': voyage.is_fictif,'voyage-reel': !voyage.is_fictif,}"
                                        @click="handleVoyageChange(voyage)"
                                    >
                                        <font-awesome-icon :icon="voyage.is_fictif ? 'fa-solid fa-hourglass-half' : 'fa-solid fa-truck'" class="mr-2"/>
                                        {{ voyage.numero_voyage }}
                                    </a-button>
                                </div>
                            </template>
                        </a-dropdown>
                    </a-button-group>
                </div>
            </div>
            
        </div>
    </FormModal>
</template>

<script setup>

const props = defineProps({
    vehicules: { type: Array, default: () => [] },
    chauffeurs: { type: Array, default: () => [] },
    remorques: { type: Array, default: () => [] },
    lieuLivraisonOptions: { type: Array, default: () => [] },
    tresoreries: { type: Array, default: () => [] },
});

const isModalVisible = ref(false);
const currentReservation = ref(null);
const selectedVoyage = ref(null);
const activeTabKey = ref("1");
const isLoadingDetails = ref(false);
const carburantCards = ref([]);
const allTariffsWithDetails = ref([]);
const lieuLivraisonOptions = ref([]);
const tresoreriesOptions = ref([]);
const vehiculesData = ref(props.vehicules || []);
const remorquesData = ref(props.remorques || []);
const chauffeursData = ref(props.chauffeurs || []);
const isSubmitting = ref(false);
const visibleVoyages = ref(2); // nombre de voyages visibles par défaut

// Fonction pour mettre à jour le nombre de voyages visibles selon taille de l'écran
const updateVisibleVoyages = () => {
    const width = window.innerWidth;
    if (width >= 1280) {
        visibleVoyages.value = Math.min(6,currentReservation.value?.voyages?.length || 0);
    } else if (width >= 1024) {
        visibleVoyages.value = Math.min(4,currentReservation.value?.voyages?.length || 0);
    } else if (width >= 768) {
        visibleVoyages.value = Math.min(3,currentReservation.value?.voyages?.length || 0);
    } else if (width >= 640) {
        visibleVoyages.value = Math.min(2,currentReservation.value?.voyages?.length || 0);
    } else {
        visibleVoyages.value = Math.min(1,currentReservation.value?.voyages?.length || 0);
    }
};

const displayedVoyages = computed(
    () =>
        currentReservation.value?.voyages?.slice(0, visibleVoyages.value) || []
);
const dropdownVoyages = computed(
    () => currentReservation.value?.voyages?.slice(visibleVoyages.value) || []
);
const isDropdownActive = computed(
    () =>
        selectedVoyage.value &&
        dropdownVoyages.value.some(
            (v) =>
                v.id === selectedVoyage.value.id &&
                v.numero_voyage === selectedVoyage.value.numero_voyage
        )
);



const form = useForm({
    id: null,
    vehicule_id: null,
    voyage_marchandises: [],
    voyage_charges: [],
    carburant_transactions: [],
});

const open = (reservation) => {
    router.visit(route("reservation.show", reservation.id), {preserveState: true,preserveScroll: true,only: ["flash"],
        onSuccess: (page) => {

            // Mettre à jour le nombre de voyages visibles selon la taille de l'écran
            updateVisibleVoyages();


        },
    });
};

// pour gérer la taille de l'écrzn
onMounted(() => {
    updateVisibleVoyages();
    window.addEventListener("resize", updateVisibleVoyages);
});
onBeforeUnmount(() => {
    window.removeEventListener("resize", updateVisibleVoyages);
});







defineExpose({ open });
</script>

